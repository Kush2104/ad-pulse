name: Build and Push to Docker Hub

on:
    push:
        branches:
            - stage

env:
    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
    check-changes-and-build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
            ref: stage
            fetch-depth: 5

        - name: print
          run: |
            echo "Before: ${{ github.event.before }}"
            echo "After: ${{ github.sha }}"
            echo "Branch: $(git branch --show-current)"

        - name: Get list of folders
          id: list_folders
          run: |
                find . -maxdepth 1 -mindepth 1 -type d -not -path '*/\.*' -not -path './ad-devops' | while read -r dir; do
                if [[ -n $(git diff --name-only HEAD^ HEAD  -- $dir) ]]; then
                  echo "::set-env name=FOLDERS::$dir"
                fi
                done

        - name: get folder name
          run: |
            echo "Folders: $FOLDERS"

        - name: Bump version
          run: |
                if [ "$FOLDERS" != "" ]; then
                  folders=$FOLDERS
                  echo "Folders: $folders"
                  while read -r dir; do
                    echo "Processing $dir"
                    old_version=$(cat $dir/version.txt)
                    regex="([0-9]+)\.([0-9]+)\.([0-9]+)"
                    if [[ $old_version =~ $regex ]]; then
                        major="${BASH_REMATCH[1]}"
                        minor="${BASH_REMATCH[2]}"
                        patch="${BASH_REMATCH[3]}"
                        new_patch=$((patch + 1))
                        new_version="${major}.${minor}.${new_patch}"
                        echo "Old version: $old_version"
                        echo "New version: $new_version"
                        echo $new_version > $dir/version.txt
                    else
                        echo "Invalid version format: $old_version"
                    fi
                  done <<< "$folders"
                else
                  echo "No changes detected"
                fi

        - name: Commit changes
          run: |
            if [ "$FOLDERS" != "" ]; then
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git add .
              git commit -m "Bump version to $new_version"
              git push https://${{ secrets.PAT }}@github.com/${{ github.repository }} HEAD:stage
            else
                echo "No changes detected"
            fi

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to Docker Hub
          run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  
        - name: Build and push Docker images
          run: |
            if [ "$FOLDERS" != "" ]; then
              folders=$FOLDERS
              while read -r dir; do
                docker buildx build \
                  --platform linux/amd64,linux/arm64 \
                  --push \
                  -t ${{ secrets.DOCKER_USERNAME }}/$(basename $dir):$(cat $(basename $dir)/version.txt) \
                  -f $dir/Dockerfile \
                  $dir
              done <<< "$folders"
            else
              echo "No changes detected"
            fi

    update-helm-chart:
      needs: check-changes-and-build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
            ref: stage
            fetch-depth: 5

        - name: install yq
          run: |
            wget https://github.com/mikefarah/yq/releases/download/v4.12.0/yq_linux_amd64.tar.gz -O /tmp/yq.tar.gz
            tar xvf /tmp/yq.tar.gz -C /tmp/
            mv /tmp/yq_linux_amd64 /usr/local/bin/yq
            chmod +x /usr/local/bin/yq

        - name: Update Helm chart
          run: |
            yq eval '.adpulse.ad_manager_svc.image.tag = "'"$(cat ad-manager-svc/version.txt)"'"' -i ./ad-devops/helm/ad-pulse/values.yaml
            yq eval '.adpulse.ad_manager_frontend.image.tag = "'"$(cat ad-manager-frontend/version.txt)"'"' -i ./ad-devops/helm/ad-pulse/values.yaml
            yq eval '.adpulse.adpulse_engagement_svc.image.tag = "'"$(cat adpulse-engagement-svc/version.txt)"'"' -i ./ad-devops/helm/ad-pulse/values.yaml
            yq eval '.adpulse.ad_server_svc.image.tag = "'"$(cat ad-server-svc/version.txt)"'"' -i ./ad-devops/helm/ad-pulse/values.yaml

        - name: Commit changes
          run: |
            if [ -n "$(git status --porcelain)" ]; then
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git add .
              git commit -m "Updating helm chart values.yaml"
              git push https://${{ secrets.PAT }}@github.com/${{ github.repository }} HEAD:stage
            else
              echo "No changes detected."
            fi
            

    deploy:
      needs: update-helm-chart
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY_STAGE }}
          project_id: ${{ vars.GCP_PROJECT_ID_STAGE }}
          export_default_credentials: true
        
      - name: Install kubectl
        run: |
          gcloud components install kubectl
          gcloud components install gke-gcloud-auth-plugin
      
      - name: Authenticate with Google Cloud
        run: |
          printf "%s" '${{ secrets.GCP_SA_KEY_STAGE }}' > key.json
          gcloud auth activate-service-account --key-file=key.json

  
      - name: Set up Kubernetes cluster context
        run: gcloud container clusters get-credentials ${{ vars.GCP_CLUSTER_NAME_STAGE }} --zone ${{ vars.GCP_CLUSTER_ZONE_STAGE}} --project ${{ vars.GCP_PROJECT_ID_STAGE }}
  
      - name: Configure Helm
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo update
  
      - name: Upgrade Helm chart
        run: |
          helm install stage ./ad-devops/helm/ad-pulse --values ./ad-devops/helm/ad-pulse/values.yaml --namespace=adpulse --create-namespace



# helm upgrade --install stage ./ad-devops/helm/ad-pulse ./ad-devops/helm/ad-pulse/values.yaml --namespace=adpulse